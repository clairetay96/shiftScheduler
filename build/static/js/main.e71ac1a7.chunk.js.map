{"version":3,"sources":["logo.svg","Pages/Homepage/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Homepage","onSubmit","event","preventDefault","fetch","method","headers","Accept","body","JSON","stringify","email","target","Email","value","username","Username","password1","Password1","password2","Password2","then","res","status","console","log","catch","err","message","type","name","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8HC8D5BC,EA3DE,WAsCb,OAAQ,6DAGI,6BACI,0BAAMC,SAxCE,SAACC,GACrBA,EAAMC,iBAGNC,MAFgB,+BAEC,CACbC,OAAO,OACPC,QAAS,CACLC,OAAQ,mBACR,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBC,MAAOT,EAAMU,OAAOC,MAAMC,MAC1BC,SAAUb,EAAMU,OAAOI,SAASF,MAChCG,UAAWf,EAAMU,OAAOM,UAAUJ,MAClCK,UAAWjB,EAAMU,OAAOQ,UAAUN,UAIrCO,MAAK,SAAAC,GACF,OAAgB,MAAbA,EAAIC,OACID,GAEPE,QAAQC,IAAI,YACL,SAGdJ,MAAK,SAAAC,GACO,OAANA,GACCE,QAAQC,IAAI,QAASH,MAG5BI,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,EAAIC,cAStB,SAEI,2BAAOC,KAAK,OAAOC,KAAK,UAF5B,YAII,2BAAOD,KAAK,OAAOC,KAAK,aAJ5B,YAMI,2BAAOD,KAAK,OAAOC,KAAK,cAN5B,oBAQI,2BAAOD,KAAK,OAAOC,KAAK,cACxB,2BAAOD,KAAK,e,MC3BrBE,MAff,WACE,OACE,6BACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,KACR,kBAAC,EAAD,WCNIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLxB,QAAQwB,MAAMA,EAAMpB,c","file":"static/js/main.e71ac1a7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\n\nconst Homepage = ()=>{\n\n    const onSubmitHandler = (event)=>{\n        event.preventDefault()\n        let signUpURL = \"/api/rest-auth/registration/\"\n\n        fetch(signUpURL, {\n            method:\"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email: event.target.Email.value,\n                username: event.target.Username.value,\n                password1: event.target.Password1.value,\n                password2: event.target.Password2.value\n            })\n\n        })\n            .then(res => {\n                if(res.status!==200){\n                    return res\n                } else {\n                    console.log(\"All good\")\n                    return null\n                }\n            })\n            .then(res => {\n                if(res!==null){\n                    console.log(\"error\", res)\n                }\n            })\n            .catch(err => console.log(err.message))\n\n    }\n\n\n    return (<div>\n                This is the homepage.\n                Sign up\n                <div>\n                    <form onSubmit={onSubmitHandler}>\n                        Email:\n                        <input type=\"text\" name=\"Email\"/>\n                        Username:\n                        <input type=\"text\" name=\"Username\"/>\n                        Password:\n                        <input type=\"text\" name=\"Password1\"/>\n                        Confirm Password:\n                        <input type=\"text\" name=\"Password2\"/>\n                        <input type=\"submit\" />\n                    </form>\n                </div>\n\n\n            </div>)\n}\n\nexport default Homepage","import React from 'react';\nimport logo from './logo.svg';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport Homepage from './Pages/Homepage'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n          <Switch>\n            <Route path=\"/\">\n                <Homepage />\n            </Route>\n\n          </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}